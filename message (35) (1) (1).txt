
import os
import discord
from discord.ext import commands
from discord import app_commands
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("DISCORD_TOKEN")
if TOKEN is None:
    raise ValueError("DISCORD_TOKEN environment variable is not set. Please add it to your Replit secrets.")

GUILD_ID_STR = os.getenv("GUILD_ID")
if GUILD_ID_STR is None:
    raise ValueError("GUILD_ID environment variable is not set. Please add it to your Replit secrets.")
GUILD_ID = int(GUILD_ID_STR)

ADMIN_ROLE_ID_STR = os.getenv("ADMIN_ROLE_ID")
if ADMIN_ROLE_ID_STR is None:
    raise ValueError("ADMIN_ROLE_ID environment variable is not set. Please add it to your Replit secrets.")
ADMIN_ROLE_ID = int(ADMIN_ROLE_ID_STR)

intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)

user_ticket_channels = {}
blacklisted_users = set()
ticket_stats = {"total_tickets": 0}

@bot.event
async def on_ready():
    print(f"‚úÖ Logged in as {bot.user}")
    await bot.tree.sync(guild=discord.Object(id=GUILD_ID))

### PANEL COMMAND ###
@bot.tree.command(name="panel", description="Send the ticket panel", guild=discord.Object(id=GUILD_ID))
async def panel(interaction: discord.Interaction):
    class TicketSelect(discord.ui.Select):
        def __init__(self):
            options = [
                discord.SelectOption(label="Support", value="support", description="Open a support ticket"),
                discord.SelectOption(label="Purchase", value="purchase", description="Issues with purchases"),
                discord.SelectOption(label="Report", value="report", description="Report a user or bug"),
            ]
            super().__init__(placeholder="Select a category...", options=options, custom_id="ticket_select")

        async def callback(self, interaction_select: discord.Interaction):
            if interaction_select.user.id in blacklisted_users:
                await interaction_select.response.send_message("üö´ You are blacklisted from creating tickets.", ephemeral=True)
                return

            if interaction_select.user.id in user_ticket_channels:
                await interaction_select.response.send_message("‚ö†Ô∏è You already have an open ticket.", ephemeral=True)
                return

            category = self.values[0]
            guild = interaction.guild

            overwrites = {
                guild.default_role: discord.PermissionOverwrite(view_channel=False),
                interaction.user: discord.PermissionOverwrite(view_channel=True, send_messages=True),
                guild.get_role(ADMIN_ROLE_ID): discord.PermissionOverwrite(view_channel=True)
            }

            channel = await guild.create_text_channel(
                name=f"ticket-{interaction.user.name}",
                overwrites=overwrites
            )
            user_ticket_channels[interaction.user.id] = channel.id
            ticket_stats["total_tickets"] += 1

            await channel.send(f"üéüÔ∏è Ticket for {interaction.user.mention} created.\nCategory: **{category}**")
            await interaction_select.response.send_message(f"‚úÖ Ticket created: {channel.mention}", ephemeral=True)

    embed = discord.Embed(
        title="Open Ticket",
        description="If you need any assistance click on the button corresponding to the type of ticket you wish to open.",
        color=0x5865F2
    )
    embed.set_footer(text="powered by blue gen")

    view = discord.ui.View()
    view.add_item(TicketSelect())
    await interaction.response.send_message(embed=embed, view=view)

### CLOSE ###
@bot.tree.command(name="close", description="Close a ticket", guild=discord.Object(id=GUILD_ID))
async def close(interaction: discord.Interaction):
    if interaction.channel.name.startswith("ticket-"):
        await interaction.channel.delete()
        user_ticket_channels.pop(interaction.user.id, None)
    else:
        await interaction.response.send_message("‚ùå This is not a ticket channel.", ephemeral=True)

### ADD ###
@bot.tree.command(name="add", description="Add a user to the ticket", guild=discord.Object(id=GUILD_ID))
@app_commands.describe(user="User to add to the ticket")
async def add(interaction: discord.Interaction, user: discord.Member):
    if interaction.channel.name.startswith("ticket-"):
        await interaction.channel.set_permissions(user, view_channel=True, send_messages=True)
        await interaction.response.send_message(f"‚úÖ {user.mention} added to the ticket.")
    else:
        await interaction.response.send_message("‚ùå This is not a ticket channel.", ephemeral=True)

### REMOVE ###
@bot.tree.command(name="remove", description="Remove a user from the ticket", guild=discord.Object(id=GUILD_ID))
@app_commands.describe(user="User to remove from the ticket")
async def remove(interaction: discord.Interaction, user: discord.Member):
    if interaction.channel.name.startswith("ticket-"):
        await interaction.channel.set_permissions(user, overwrite=None)
        await interaction.response.send_message(f"‚úÖ {user.mention} removed from the ticket.")
    else:
        await interaction.response.send_message("‚ùå This is not a ticket channel.", ephemeral=True)

### RENAME ###
@bot.tree.command(name="rename", description="Rename the ticket", guild=discord.Object(id=GUILD_ID))
@app_commands.describe(name="New ticket name")
async def rename(interaction: discord.Interaction, name: str):
    if interaction.channel.name.startswith("ticket-"):
        await interaction.channel.edit(name=name)
        await interaction.response.send_message(f"‚úÖ Channel renamed to `{name}`")
    else:
        await interaction.response.send_message("‚ùå This is not a ticket channel.", ephemeral=True)

### PING ###
@bot.tree.command(name="ping", description="Check bot latency", guild=discord.Object(id=GUILD_ID))
async def ping(interaction: discord.Interaction):
    latency = bot.latency * 1000
    await interaction.response.send_message(f"üèì Pong! Latency: `{latency:.2f}ms`")

### BLACKLIST ###
@bot.tree.command(name="blacklist", description="Blacklist a user from creating tickets", guild=discord.Object(id=GUILD_ID))
@app_commands.describe(user="User to blacklist")
async def blacklist(interaction: discord.Interaction, user: discord.Member):
    if interaction.user.guild_permissions.administrator:
        blacklisted_users.add(user.id)
        await interaction.response.send_message(f"üö´ {user.mention} has been blacklisted.")
    else:
        await interaction.response.send_message("‚ùå Admins only.", ephemeral=True)

### UNBLACKLIST ###
@bot.tree.command(name="unblacklist", description="Unblacklist a user", guild=discord.Object(id=GUILD_ID))
@app_commands.describe(user="User to unblacklist")
async def unblacklist(interaction: discord.Interaction, user: discord.Member):
    if interaction.user.guild_permissions.administrator:
        blacklisted_users.discard(user.id)
        await interaction.response.send_message(f"‚úÖ {user.mention} removed from blacklist.")
    else:
        await interaction.response.send_message("‚ùå Admins only.", ephemeral=True)

### NOTIFY ###
@bot.tree.command(name="notify", description="Send a DM to a user", guild=discord.Object(id=GUILD_ID))
@app_commands.describe(user="User to notify", message="Message to send")
async def notify(interaction: discord.Interaction, user: discord.Member, message: str):
    try:
        await user.send(f"üîî Notification: {message}")
        await interaction.response.send_message("‚úÖ Notification sent.")
    except discord.Forbidden:
        await interaction.response.send_message("‚ùå Failed to send DM.", ephemeral=True)

### ALERT ###
@bot.tree.command(name="alert", description="Ping the ticket creator", guild=discord.Object(id=GUILD_ID))
async def alert(interaction: discord.Interaction):
    if interaction.channel.name.startswith("ticket-"):
        name = interaction.channel.name.split("ticket-")[1]
        user = discord.utils.get(interaction.guild.members, name=name)
        if user:
            await interaction.response.send_message(f"üö® {user.mention}, staff has pinged you.")
        else:
            await interaction.response.send_message("‚ùå Creator not found.", ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå Not a ticket channel.", ephemeral=True)

### SUGGEST ###
@bot.tree.command(name="suggest", description="Submit a suggestion", guild=discord.Object(id=GUILD_ID))
@app_commands.describe(suggestion="Your suggestion")
async def suggest(interaction: discord.Interaction, suggestion: str):
    channel = discord.utils.get(interaction.guild.text_channels, name="suggestions")
    if channel:
        embed = discord.Embed(title="üí° Suggestion", description=suggestion, color=discord.Color.green())
        embed.set_footer(text=f"From: {interaction.user}", icon_url=interaction.user.display_avatar.url)
        await channel.send(embed=embed)
        await interaction.response.send_message("‚úÖ Suggestion submitted!", ephemeral=True)
    else:
        await interaction.response.send_message("‚ùå No #suggestions channel found.", ephemeral=True)

### STATS ###
@bot.tree.command(name="stats", description="Show ticket statistics", guild=discord.Object(id=GUILD_ID))
async def stats(interaction: discord.Interaction):
    await interaction.response.send_message(f"üìä Total tickets created: `{ticket_stats['total_tickets']}`")

bot.run(TOKEN)
